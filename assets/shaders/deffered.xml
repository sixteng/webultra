<shaders>
	<shader name="deffered_normal_basic_vs" type="vertex">
		<src target="webgl">
			attribute vec3 aVertexPosition;
		    attribute vec3 aVertexNormal;

		    uniform mat4 uMVMatrix;
		    uniform mat4 uMMatrix;
		    uniform mat4 uPMatrix;
		    uniform mat3 uNMatrix;

		    varying vec4 vPos;
        	varying vec3 vNormal;

        	vec4 getPosition () {
        		return vec4(aVertexPosition, 1.0);
        	}

        	vec3 getNormal() {
        		return normalize(uNMatrix * aVertexNormal);
        	}

        	//Whont add getUVS as it isnt needed.., write logic for this in shader manager

		    void main(void) {
		        vPos = getPosition();
		        vPos = uPMatrix * uMVMatrix * uMMatrix * vPos;

		        vNormal = getNormal();

		        gl_Position = vPos;
		    }
		</src>
		<params>
			<param name="uMVMatrix" type="mat4" />
			<param name="uMMatrix" type="mat4" />
			<param name="uPMatrix" type="mat4" />
			<param name="uNMatrix" type="mat3" />
			<param name="aVertexNormal" type="float3" />
			<param name="aVertexPosition" type="float3" />
		</params>
	</shader>
	<shader name="deffered_normal_basic_ps" type="pixel">
		<src target="webgl">
        	precision mediump float;

		   	varying vec4 vPos;
        	varying vec3 vNormal;

        	//Whont add any getDiffuse(), getSpecular() etc.. as it dosent need em, write logic for this in shader manager
        	vec3 getNormal() {
        		return vNormal;
        	}

		    void main(void) {
		    	vec3 normal = getNormal();
        		gl_FragColor = vec4(normal * 0.5 + 0.5, vPos.z / vPos.w);
		    }
		</src>
		<params>
		</params>
	</shader>
	<shader name="deffered_color_basic_vs" type="vertex">
		<src target="webgl">
			attribute vec3 aVertexPosition;
		    attribute vec2 aTextureCoord;

		    uniform mat4 uMVMatrix;
		    uniform mat4 uMMatrix;
		    uniform mat4 uPMatrix;

		    varying vec2 vUV;

		    vec4 getPosition () {
        		return vec4(aVertexPosition, 1.0);
        	}

        	vec2 getUVS () {
        		return aTextureCoord;
        	}

        	//Whont add getNormal as it isnt needed.., write logic for this in shader manager

		    void main(void) {
		   		vec4 pos = getPosition();
		   		pos = uPMatrix * uMVMatrix * uMMatrix * pos;


		    	vUV = getUVS();
		        gl_Position = pos;
		    }
		</src>
		<params>
			<param name="uMVMatrix" type="mat4" />
			<param name="uMMatrix" type="mat4" />
			<param name="uPMatrix" type="mat4" />
			<param name="aVertexPosition" type="float3" />
			<param name="aTextureCoord" type="float2" />
		</params>
	</shader>
	<shader name="deffered_color_basic_ps" type="pixel">
		<src target="webgl">
			precision highp float;

			uniform sampler2D uSampler;

		   	varying vec2 vUV;

		    vec4 getDiffuse() {
		    	return texture2D(uSampler, vec2(vUV.s, vUV.t));
		    }

		    //Function used by deffered render, will be in the base shader for deffered color pixel shader
		    const float unit = 255.0/256.0;
		    float vec3_to_float( vec3 data ) {
		    	highp float compressed = fract( data.x * unit ) + floor( data.y * unit * 255.0 ) + floor( data.z * unit * 255.0 ) * 255.0;
		    	return compressed;
		    }

		    void main(void) {
		    	vec4 diffuse = getDiffuse();

		    	const float compressionScale = 0.999;
        		gl_FragColor.x = vec3_to_float( compressionScale * diffuse.xyz );
        		gl_FragColor.y = 0.0;
        		gl_FragColor.z = 0.0;
        		gl_FragColor.w = 1.0;
		    }
		</src>
		<params>
			<param name="uSampler" type="tex2d" />
		</params>
	</shader>
	<shader name="deffered_normal_terrain_vs" type="vertex">
		<src target="webgl">
			uniform mat4 uMVMatrix;
			uniform mat4 uMMatrix;
		    uniform mat4 uPMatrix;

			attribute vec3 aVertexPosition;
			attribute vec2 aTextureCoord;

		    uniform sampler2D uSampler;
        	uniform vec2 planeSize;

        	varying vec4 vPos;
        	varying vec3 vNormal;

        	vec4 getPosition() {
        		vec4 vColor = texture2D(uSampler, aTextureCoord);
				float height = vColor.x * 25.0;
				
				return vec4(aVertexPosition.x, height, aVertexPosition.y, 1.0);
        	}

        	vec3 getNormal() {
        		vec2 offset = vec2(1.0, 1.0) / planeSize;

				float s01 = texture2D(uSampler, aTextureCoord + vec2(-offset.x, 0.0)).x * 25.0;
				float s21 = texture2D(uSampler, aTextureCoord + vec2(offset.x, 0.0)).x * 25.0;
				float s10 = texture2D(uSampler, aTextureCoord + vec2(0.0, -offset.x)).x * 25.0;
				float s12 = texture2D(uSampler, aTextureCoord + vec2(0.0, offset.x)).x * 25.0;
				
				vec3 va = normalize(vec3(2.0, s21 - s01, 0.0));
				vec3 vb = normalize(vec3(0.0, s12 - s10, -2.0));

				return vec3( cross(va,vb));
        	}

        	//Whont add getUVS as it isnt needed.., write logic for this in shader manager
		    void main(void) {
		    	vPos = getPosition();
		    	vPos = uPMatrix * uMVMatrix * uMMatrix * vPos;

		    	vNormal = getNormal();
				
            	gl_Position = vPos;
		    }
		</src>
		<params>
			<param name="uMVMatrix" type="mat4" />
			<param name="uMMatrix" type="mat4" />
			<param name="uPMatrix" type="mat4" />
			<param name="aVertexPosition" type="float3" />
			<param name="aTextureCoord" type="float2" />
			<param name="uSampler" type="tex2d" />
			<param name="planeSize" type="float2" />
		</params>
	</shader>
	<shader name="deffered_normal_terrain_ps" type="pixel">
		<src target="webgl">
			precision mediump float;

		   	varying vec4 vPos;
		    varying vec3 vNormal;

		    //Whont add any getDiffuse(), getSpecular() etc.. as it dosent need em, write logic for this in shader manager
		    vec3 getNormal() {
		    	return normalize( vNormal );
		    }

		    void main(void) {
        		vec3 normal = getNormal();
        		gl_FragColor = vec4(normal * 0.5 + 0.5, vPos.z / vPos.w);
		    }
		</src>
		<params>
		</params>
	</shader>

	<shader name="deffered_color_terrain_vs" type="vertex">
		<src target="webgl">
			uniform mat4 uMVMatrix;
			uniform mat4 uMMatrix;
			uniform mat4 uPMatrix;

			attribute vec3 aVertexPosition;
			attribute vec2 aTextureCoord;

			uniform sampler2D uSampler;

        	varying vec2 vUV;

        	//shader var / node result between functions, getPosition, getNormal 
        	vec4 getPosition() {
        		vec4 vColor = texture2D(uSampler, aTextureCoord);
				float height = vColor.x * 25.0;
				
				return vec4(aVertexPosition.x, height, aVertexPosition.y, 1.0);
        	}

        	vec2 getUVS () {
        		return aTextureCoord;
        	}

		    void main(void) {
		    	vec4 pos = getPosition();
		    	pos = uPMatrix * uMVMatrix * uMMatrix * pos;

		    	vUV = getUVS();

            	gl_Position = pos;
		    }
		</src>
		<params>
			<param name="uMVMatrix" type="mat4" />
			<param name="uMMatrix" type="mat4" />
			<param name="uPMatrix" type="mat4" />
			<param name="aVertexPosition" type="float3" />
			<param name="aTextureCoord" type="float2" />
			<param name="uSampler" type="tex2d" />
		</params>
	</shader>
	<shader name="deffered_color_terrain_ps" type="pixel">
		<src target="webgl">
			precision highp float;

		   	varying vec2 vUV;

		   	uniform sampler2D combined;
		    uniform sampler2D mask;

		    vec4 getDiffuse() {
		    	vec4 maskColor = texture2D(mask, vec2(vUV.x, vUV.y));

        		vec2 newUv = vUV * 5.0;
        		vec4 combinedColor = texture2D(combined, vec2(newUv.x, newUv.y));
        		float combR = maskColor.r;
        		vec3 newColor = vec3(0.0, 0.0, 0.0);

        		if(combR > 0.5) {
        			combR = (combR - 0.5) * 2.0;
        			newColor = mix(vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), combR);
        		} else {
        			combR = combR * 2.0;
        			newColor = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), combR);
        		}

        		vec4 diffuse = vec4(combinedColor.rgb * newColor, 1.0);
        		vec3 color1 = diffuse.r * vec3(0.798, 0.750, 0.678);
        		vec3 color2 = diffuse.g * vec3(0.777, 1.0, 0.637);
        		vec3 color3 = diffuse.b * vec3(0.9, 0.964, 1.0);

        		color1 = color1 + color2;
        		color1 = color1 + color3;
        		diffuse.rgb = color1;

        		return diffuse;
		    }

		    //Function used by deffered render, will be in the base shader for deffered color pixel shader
		    const float unit = 255.0/256.0;
		    float vec3_to_float( vec3 data ) {
		    	highp float compressed = fract( data.x * unit ) + floor( data.y * unit * 255.0 ) + floor( data.z * unit * 255.0 ) * 255.0;
		    	return compressed;
		    }

		    void main(void) {
        		vec4 diffuse = getDiffuse();

        		const float compressionScale = 0.999;
        		gl_FragColor.x = vec3_to_float( compressionScale * diffuse.xyz );
        		gl_FragColor.y = 0.0;
        		gl_FragColor.z = 0.0;
        		gl_FragColor.w = 1.0;

		    }
		</src>
		<params>
			<param name="combined" type="tex2d" />
			<param name="mask" type="tex2d" />
		</params>
	</shader>
	<shader name="deffered_combine_vs" type="vertex">
		<src target="webgl">
			attribute vec3 aVertexPosition;
			varying vec2 vUV;

			vec4 shaderPos;
			vec4 getPosition() {
				shaderPos = vec4( sign( aVertexPosition.xy ), 0.0, 1.0 );
				return shaderPos;
			}

			vec2 getUVS() {
				return shaderPos.xy * vec2( 0.5 ) + 0.5;
			}

		    void main(void) {
		    	vec4 pos = getPosition();
		    	vUV = getUVS();

		    	gl_Position = pos;
		    }
		</src>
		<params>
			<param name="aVertexPosition" type="float3" />
		</params>
	</shader>
	<shader name="deffered_combine_ps" type="pixel">
		<src target="webgl">
			precision mediump float;
			
			uniform sampler2D sampler;

			varying vec2 vUV;
		    void main(void) {
		    	vec3 color = texture2D( sampler, vUV ).xyz;
		    	gl_FragColor = vec4( color, 1.0 );
		    }
		</src>
		<params>
			<param name="sampler" type="tex2d" />
		</params>
	</shader>
	<shader name="deffered_directional_vs" type="vertex">
		<src target="webgl">
			attribute vec3 aVertexPosition;

			vec4 getPosition() {
				return vec4( sign( aVertexPosition.xy ), 0.0, 1.0 );
			}

		    void main(void) {
		    	vec4 pos = getPosition();
		    	gl_Position = pos;
		    }
		</src>
		<params>
			<param name="aVertexPosition" type="float3" />
		</params>
	</shader>
	<shader name="deffered_directional_ps" type="pixel">
		<src target="webgl">
			precision mediump float;

			uniform float viewHeight;
			uniform float viewWidth;
			uniform mat4 matProjInverse;
			uniform vec3 lightVector;

			uniform sampler2D normalSampler;
			uniform sampler2D colorSampler;

			//Function used by deffered render, will be in the base shader for deffered color pixel shader
			vec3 float_to_vec3( float data ) {
				vec3 uncompressed;
				uncompressed.x = fract( data );
				float zInt = floor( data / 255.0 );
				uncompressed.z = fract( zInt / 255.0 );
				uncompressed.y = fract( floor( data - ( zInt * 255.0 ) ) / 255.0 );
				return uncompressed;
			}
			
		    void main(void) {
		    	vec2 texCoord = gl_FragCoord.xy / vec2( viewWidth, viewHeight );
		    	vec4 normalDepth = texture2D( normalSampler, texCoord );
		    	float z = normalDepth.w;

		    	if ( z == 0.0 ) discard;

		    	vec2 xy = texCoord * 2.0 - 1.0;

		    	vec4 vertexPositionProjected = vec4( xy, z, 1.0 );
				vec4 vertexPositionVS = matProjInverse * vertexPositionProjected;
				vertexPositionVS.xyz /= vertexPositionVS.w;
				vertexPositionVS.w = 1.0;

				vec3 normal = normalize(normalDepth.xyz * 2.0 - 1.0);

				vec4 colorMap = texture2D( colorSampler, texCoord );

				vec3 albedo = float_to_vec3( abs( colorMap.x ) );
				vec3 specularColor = float_to_vec3( abs( colorMap.y ) );
				float shininess = abs( colorMap.z );
				float wrapAround = sign( colorMap.z );
				float additiveSpecular = sign( colorMap.y );

				float dotProduct = dot( normal, lightVector );
				float diffuseFull = max( dotProduct, 0.0 );

				vec3 diffuse;

				if ( wrapAround < 0.0 ) {
					// wrap around lighting
					float diffuseHalf = max( 0.5 * dotProduct + 0.5, 0.0 );

					const vec3 wrapRGB = vec3( 1.0, 1.0, 1.0 );
					diffuse = mix( vec3( diffuseFull ), vec3( diffuseHalf ), wrapRGB );

				} else {
					//simple lighting
					diffuse = vec3( diffuseFull );
				}

				const float attenuation = 1.0;

				vec3 light = vec3(1.0, 1.0, 1.0);

				gl_FragColor = vec4( light * ( albedo * diffuse ), attenuation );
				//gl_FragColor = vec4( diffuse, attenuation );
		    }
		</src>
		<params>
			<param name="viewHeight" type="float" />
			<param name="viewWidth" type="float" />
			<param name="matProjInverse" type="mat4" />
			<param name="lightVector" type="float3" />
			<param name="normalSampler" type="tex2d" />
			<param name="colorSampler" type="tex2d" />
		</params>
	</shader>
	<shader name="deffered_spotlight_vs" type="vertex">
		<src target="webgl">
			attribute vec3 aVertexPosition;

			vec4 getPosition() {
				return vec4( sign( aVertexPosition.xy ), 0.0, 1.0 );
			}

		    void main(void) {
		    	vec4 pos = getPosition();
		    	gl_Position = pos;
		    }
		</src>
		<params>
			<param name="aVertexPosition" type="float3" />
		</params>
	</shader>
	<shader name="deffered_spotlight_ps" type="pixel">
		<src target="webgl">
			precision mediump float;

			uniform float viewHeight;
			uniform float viewWidth;
			uniform mat4 matProjInverse;
			uniform vec3 lightPos;
			uniform vec3 lightDir;
			uniform float lightAngle;

			uniform sampler2D normalSampler;
			uniform sampler2D colorSampler;

			//Function used by deffered render, will be in the base shader for deffered color pixel shader
			vec3 float_to_vec3( float data ) {
				vec3 uncompressed;
				uncompressed.x = fract( data );
				float zInt = floor( data / 255.0 );
				uncompressed.z = fract( zInt / 255.0 );
				uncompressed.y = fract( floor( data - ( zInt * 255.0 ) ) / 255.0 );
				return uncompressed;
			}
			
		    void main(void) {
		    	vec2 texCoord = gl_FragCoord.xy / vec2( viewWidth, viewHeight );
		    	vec4 normalDepth = texture2D( normalSampler, texCoord );
		    	float z = normalDepth.w;

		    	if ( z == 0.0 ) discard;

		    	vec2 xy = texCoord * 2.0 - 1.0;

		    	vec4 vertexPositionProjected = vec4( xy, z, 1.0 );
				vec4 vertexPositionVS = matProjInverse * vertexPositionProjected;
				vertexPositionVS.xyz /= vertexPositionVS.w;
				vertexPositionVS.w = 1.0;

				vec3 normal = normalize(normalDepth.xyz * 2.0 - 1.0);

				vec4 colorMap = texture2D( colorSampler, texCoord );

				vec3 albedo = float_to_vec3( abs( colorMap.x ) );
				vec3 specularColor = float_to_vec3( abs( colorMap.y ) );
				float shininess = abs( colorMap.z );
				float wrapAround = sign( colorMap.z );
				float additiveSpecular = sign( colorMap.y );

				vec3 lightVector = normalize( lightPos.xyz - vertexPositionVS.xyz );
				float rho = dot( lightDir, lightVector );
				float rhoMax = cos( lightAngle * 0.5 );

				if ( rho <= rhoMax ) discard;

				float theta = rhoMax + 0.0001;
				float phi = rhoMax + 0.05;
				float falloff = 4.0;

				float spot = 0.0;

				if ( rho >= phi ) {
					spot = 1.0;
				} else if ( rho <= theta ) {
					spot = 0.0;
				} else {
					spot = pow( ( rho - theta ) / ( phi - theta ), falloff );
				}

				float dotProduct = dot( normal, lightVector );
				float diffuseFull = max( dotProduct, 0.0 );

				vec3 diffuse;

				if ( wrapAround < 0.0 ) {
					// wrap around lighting
					float diffuseHalf = max( 0.5 * dotProduct + 0.5, 0.0 );

					const vec3 wrapRGB = vec3( 1.0, 1.0, 1.0 );
					diffuse = mix( vec3( diffuseFull ), vec3( diffuseHalf ), wrapRGB );

				} else {
					//simple lighting
					diffuse = vec3( diffuseFull );
				}

				diffuse *= spot;
				const float attenuation = 1.0;

				vec3 light = vec3(1.0, 1.0, 1.0);

				gl_FragColor = vec4( light * ( albedo * diffuse ), attenuation );
		    }
		</src>
		<params>
			<param name="viewHeight" type="float" />
			<param name="viewWidth" type="float" />
			<param name="matProjInverse" type="mat4" />
			<param name="lightPos" type="float3" />
			<param name="lightDir" type="float3" />
			<param name="lightAngle" type="float" />
			<param name="normalSampler" type="tex2d" />
			<param name="colorSampler" type="tex2d" />
		</params>
	</shader>
	<shader name="deffered_pointlight_vs" type="vertex">
		<src target="webgl">
			attribute vec3 aVertexPosition;

			uniform mat4 uMVMatrix;
		    uniform mat4 uMMatrix;
		    uniform mat4 uPMatrix;

			vec4 getPosition() {
				return vec4(aVertexPosition, 1.0);
			}

		    void main(void) {
		    	vec4 pos = getPosition();

		    	pos = uPMatrix * uMVMatrix * uMMatrix * pos;

		    	gl_Position = pos;
		    }
		</src>
		<params>
			<param name="aVertexPosition" type="float3" />
			<param name="uMVMatrix" type="mat4" />
			<param name="uMMatrix" type="mat4" />
			<param name="uPMatrix" type="mat4" />
		</params>
	</shader>
	<shader name="deffered_pointlight_ps" type="pixel">
		<src target="webgl">
			precision mediump float;

			uniform float viewHeight;
			uniform float viewWidth;
			uniform mat4 matProjInverse;
			uniform float lightRadius;
			uniform vec3 lightPos;

			uniform sampler2D normalSampler;
			uniform sampler2D colorSampler;

			//Function used by deffered render, will be in the base shader for deffered color pixel shader
			vec3 float_to_vec3( float data ) {
				vec3 uncompressed;
				uncompressed.x = fract( data );
				float zInt = floor( data / 255.0 );
				uncompressed.z = fract( zInt / 255.0 );
				uncompressed.y = fract( floor( data - ( zInt * 255.0 ) ) / 255.0 );
				return uncompressed;
			}
			
		    void main(void) {
		    	vec2 texCoord = gl_FragCoord.xy / vec2( viewWidth, viewHeight );
		    	vec4 normalDepth = texture2D( normalSampler, texCoord );
		    	float z = normalDepth.w;

		    	if(z == 0.0) discard;

		    	vec2 xy = texCoord * 2.0 - 1.0;

		    	vec4 vertexPositionProjected = vec4( xy, z, 1.0 );
				vec4 vertexPositionVS = matProjInverse * vertexPositionProjected;
				vertexPositionVS.xyz /= vertexPositionVS.w;
				vertexPositionVS.w = 1.0;

				vec3 normal = normalize(normalDepth.xyz * 2.0 - 1.0);

				vec4 colorMap = texture2D( colorSampler, texCoord );

				vec3 albedo = float_to_vec3( abs( colorMap.x ) );
				vec3 specularColor = float_to_vec3( abs( colorMap.y ) );
				float shininess = abs( colorMap.z );
				float wrapAround = sign( colorMap.z );
				float additiveSpecular = sign( colorMap.y );

				vec3 lightVector = lightPos.xyz - vertexPositionVS.xyz;
				
				float distance = length( lightVector );

				if(distance > lightRadius) discard;

				float dotProduct = dot( normal, lightVector );
				float diffuseFull = max( dotProduct, 0.0 );

				vec3 diffuse;

				if ( wrapAround < 0.0 ) {
					// wrap around lighting
					float diffuseHalf = max( 0.5 * dotProduct + 0.5, 0.0 );

					const vec3 wrapRGB = vec3( 1.0, 1.0, 1.0 );
					diffuse = mix( vec3( diffuseFull ), vec3( diffuseHalf ), wrapRGB );

				} else {
					//simple lighting
					diffuse = vec3( diffuseFull );
				}

				float cutoff = 2.0;
				float denom = distance / lightRadius + 1.0;
				float attenuation = 1.0 / ( denom * denom );
				attenuation = ( attenuation - cutoff ) / ( 1.0 - cutoff );
				attenuation = max( attenuation, 0.0 );
				attenuation *= attenuation;

				vec3 light = vec3(0.0, 0.0, 1.0);

				gl_FragColor = vec4( light * ( albedo * diffuse ), attenuation );
		    }
		</src>
		<params>
			<param name="viewHeight" type="float" />
			<param name="viewWidth" type="float" />
			<param name="matProjInverse" type="mat4" />
			<param name="lightPos" type="float3" />
			<param name="lightRadius" type="float" />
			<param name="normalSampler" type="tex2d" />
			<param name="colorSampler" type="tex2d" />
		</params>
	</shader>
</shaders>