<shaders>
	<shader name="basic_vs" type="vertex">
		<src target="webgl">
			attribute vec3 aVertexPosition;
		    attribute vec3 aVertexNormal;
		    attribute vec2 aTextureCoord;

		    uniform mat4 uMVMatrix;
		    uniform mat4 uMMatrix;
		    uniform mat4 uPMatrix;
		    uniform mat3 uNMatrix;

		    varying vec2 vTextureCoord;
		    varying vec3 vLightWeighting;

		    void main(void) {
		        gl_Position = uPMatrix * uMVMatrix * uMMatrix * vec4(aVertexPosition, 1.0);
		        vTextureCoord = aTextureCoord;

		        vec3 transformedNormal = uNMatrix * aVertexNormal;
		        float directionalLightWeighting = max(dot(transformedNormal, vec3(-0.25, -0.25, -1.0)), 0.0);
		        vLightWeighting = vec3(0.1, 0.1, 0.1) + vec3(0.8, 0.8, 0.8) * directionalLightWeighting;
		    }
		</src>
		<params>
			<param name="uMVMatrix" type="mat4" />
			<param name="uMMatrix" type="mat4" />
			<param name="uPMatrix" type="mat4" />
			<param name="uNMatrix" type="mat3" />
			<param name="aVertexNormal" type="float3" />
			<param name="aVertexPosition" type="float3" />
			<param name="aTextureCoord" type="float2" />
		</params>
	</shader>
	<shader name="basic_ps" type="pixel">
		<src target="webgl">
			precision mediump float;

		   	varying vec2 vTextureCoord;
		    varying vec3 vLightWeighting;

		    uniform sampler2D uSampler;

		    vec4 getDiffuse(vec4 diffuse) {
		    	return diffuse;
		    }

		    void main(void) {
		        vec4 textureColor = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));
		       	vec4 diffuse = vec4(textureColor.rgb * vec3(0.8, 0.8, 0.8), textureColor.a);

        		gl_FragColor = getDiffuse(diffuse);
		    }
		</src>
		<params>
			<param name="uSampler" type="tex2d" />
		</params>
	</shader>
	<shader name="basic_terrain_vs" type="vertex">
		<src target="webgl">
			attribute vec3 aVertexPosition;
		    uniform mat4 uMVMatrix;
		    uniform mat4 uPMatrix;

        	uniform vec2 planeSize;
        	uniform vec2 planePos;

        	uniform sampler2D uSampler;

        	varying vec2 uv;
        	varying vec4 pos;
        	varying vec4 vNormal;
        	varying vec3 eyeVec;

		    void main(void) {
				uv = (aVertexPosition.xy + (planeSize * planePos)) / (planeSize);
				vec4 vColor = texture2D(uSampler, uv);

				float s11 = vColor.x;

				float s01 = texture2D(uSampler, uv + vec2(-1, 0)).x;
				float s21 = texture2D(uSampler, uv + vec2(1, 0)).x;
				float s10 = texture2D(uSampler, uv + vec2(0, -1)).x;
				float s12 = texture2D(uSampler, uv + vec2(0, 1)).x;
				
				vec3 va = normalize(vec3(2.0, 0 ,s21-s11));
				vec3 vb = normalize(vec3(0, 2.0 ,s12-s10));

				vNormal = vec4( cross(va,vb), s11 );
				vNormal = normalize(vNormal);

				float height = vColor.x * 25.0;
				pos = uMVMatrix * vec4(aVertexPosition.x + (planeSize.x * planePos.x), aVertexPosition.y + (planeSize.y * planePos.y), height, 1.0);

  				eyeVec = -vec3(uMVMatrix * vec4(aVertexPosition, 1.0));

            	gl_Position = uPMatrix * pos;
		    }
		</src>
		<params>
			<param name="uMVMatrix" type="mat4" />
			<param name="uPMatrix" type="mat4" />
			<param name="aVertexPosition" type="float3" />
			<param name="uSampler" type="tex2d" />
			<param name="planeSize" type="float2" />
			<param name="planePos" type="float2" />
		</params>
	</shader>
	<shader name="basic_terrain_ps" type="pixel">
		<src target="webgl">

			precision mediump float;

		    varying vec2 uv;
		   	varying vec4 pos;
		    varying vec4 vNormal;
		    varying vec3 eyeVec;

		    uniform sampler2D combined;
		    uniform sampler2D mask;
		    uniform vec3 lightDir;

		    void main(void) {
        		vec4 maskColor = texture2D(mask, vec2(uv.x, uv.y));

        		vec2 newUv = uv * 5.0;
        		vec4 combinedColor = texture2D(combined, vec2(newUv.x, newUv.y));
        		float combR = maskColor.r;
        		vec3 newColor = vec3(0.0, 0.0, 0.0);

        		if(combR > 0.5) {
        			combR = (combR - 0.5) * 2.0;
        			newColor = mix(vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0), combR);
        		} else {
        			combR = combR * 2.0;
        			newColor = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), combR);
        		}

        		vec4 diffuse = vec4(combinedColor.rgb * newColor, 1.0);
        		vec3 color1 = diffuse.r * vec3(0.798, 0.750, 0.678);
        		vec3 color2 = diffuse.g * vec3(0.777, 1.0, 0.637);
        		vec3 color3 = diffuse.b * vec3(0.9, 0.964, 1.0);

        		color1 = color1 + color2;
        		color1 = color1 + color3;
        		diffuse.rgb = color1;

        		vec3 lightDirection = normalize(lightDir - pos.xyz);

        		vec3 norm = normalize(vNormal.xyz);
        		vec2 frag_coord = gl_FragCoord.xy;
        		float spec = maskColor.b;
        		float specularLightWeighting = 0.0;
        		//if (spec > 0.0) {
        			//vec3 eyeDirection = normalize(vec3(0.0, 1.0, 0.0));
                	//vec3 reflectionDirection = -normalize(reflect(lightDirection, norm));

                	//specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), spec);
                //}

                float diffuseLightWeighting = max(dot(vNormal.xyz, lightDirection), 0.0);

                vec3 lightWeighting = vec3(0.2, 0.2, 0.2) + (vec3(1.6, 1.6, 1.6) * specularLightWeighting) + (vec3(0.8, 0.8, 0.8) * diffuseLightWeighting);


                //diffuse = vec4(maskColor.b, maskColor.b, maskColor.b, 1.0);
        		diffuse = vec4(diffuse.rgb * lightWeighting, diffuse.a);
        		gl_FragColor = diffuse;
		    }
		</src>
		<params>
			<param name="combined" type="tex2d" />
			<param name="mask" type="tex2d" />
			<param name="lightDir" type="float3" />
		</params>
	</shader>
</shaders>