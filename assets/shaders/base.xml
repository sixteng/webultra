<shaders>
	<shader name="deffered_color_base_vs" type="vertex">
		<src target="webgl">
			attribute vec3 aVertexPosition;
		    attribute vec2 aTextureCoord;

		    uniform mat4 uMVMatrix;
		    uniform mat4 uMMatrix;
		    uniform mat4 uPMatrix;

		    varying vec2 uvs;

		    #BODY#

		    void main(void) {
		   		vec4 pos = getposition();
		   		pos = uPMatrix * uMVMatrix * uMMatrix * pos;

		    	uvs = getuvs();
		        gl_Position = pos;
		    }
		</src>
		<inputs>
			<input name="position" type="float4"/>
			<input name="uvs" type="float2"/>
		</inputs>
		<params>
			<param name="uMVMatrix" type="mat4" />
			<param name="uMMatrix" type="mat4" />
			<param name="uPMatrix" type="mat4" />
			<param name="aVertexPosition" type="float3" />
			<param name="aTextureCoord" type="float2" />
		</params>
	</shader>
	<shader name="deffered_color_base_ps" type="pixel">
		<src target="webgl">
			precision highp float;

		   	varying vec2 uvs;

		   	#BODY#

		    //Function used by deffered render, will be in the base shader for deffered color pixel shader
		    const float unit = 255.0/256.0;
		    float vec3_to_float( vec3 data ) {
		    	highp float compressed = fract( data.x * unit ) + floor( data.y * unit * 255.0 ) + floor( data.z * unit * 255.0 ) * 255.0;
		    	return compressed;
		    }

		    void main(void) {
		    	vec4 diffuse = getdiffuse();

		    	const float compressionScale = 0.999;
        		gl_FragColor.x = vec3_to_float( compressionScale * diffuse.xyz );
        		gl_FragColor.y = 0.0;
        		gl_FragColor.z = 0.0;
        		gl_FragColor.w = 1.0;
		    }
		</src>
		<inputs>
			<input name="diffuse" type="float4"/>
		</inputs>
		<params>
		</params>
	</shader>
</shaders>